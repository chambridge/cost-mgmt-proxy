worker_processes auto;
error_log /dev/stderr debug;

env CLIENT_ID;
env CLIENT_SECRET;

events {
    worker_connections 1024;
}

http {
    include             mime.types;
    default_type        application/octet-stream;
    sendfile            on;
    keepalive_timeout   65;

    lua_shared_dict token_cache 10m;

    server {
        listen 8080;

        access_log /dev/stdout;

        location /api/cost-management {
            resolver 8.8.8.8 ipv6=off valid=30s;
            
            set $auth_token "";
            rewrite_by_lua_block {
                local http = require "resty.http"
                local cjson = require "cjson.safe"
                local ngx_shared = ngx.shared.token_cache

                local CLIENT_ID = os.getenv("CLIENT_ID")
                local CLIENT_SECRET = os.getenv("CLIENT_SECRET")
                local TOKEN_ENDPOINT = "https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token"
                local body = ngx.encode_args({
                    grant_type = "client_credentials",
                    client_id = CLIENT_ID,
                    client_secret = CLIENT_SECRET,
                    scope = "api.console api.iam.service_accounts"
                })

                local token, _ = ngx_shared:get("bearer_token")
                if not token then
                    local httpc = http.new()
                    local res, err = httpc:request_uri(TOKEN_ENDPOINT, {
                        method = "POST",
                        body = body,
                        headers = {
                            ["Content-Type"] = "application/x-www-form-urlencoded"
                        },
                        ssl_verify = false
                    })
                    if res and res.status == 200 then
                        local body = cjson.decode(res.body)
                        token = body["access_token"]
                        ngx_shared:set("bearer_token", token, body["expires_in"] - 30)
                    else
                        ngx.log(ngx.ERR, "Failed to get token: ", err)
                    end
                end

                ngx.var.auth_token = token or ""
            }


            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
            proxy_set_header Authorization "Bearer $auth_token";
            proxy_pass https://console.redhat.com;

            # for debug purposes
            proxy_ssl_verify off;
            proxy_ssl_server_name on;

            add_header 'Access-Control-Allow-Origin' '*' always; #Replace * with console domain
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            # if($request_method = OPTIONS) {
            #     add_header 'Access-Control-Max-Age' 1728000;
            #     add_header 'Content-Length' 0;
            #     add_header 'Content-Type' 'text/plain charset=UTF-8';
            #     return 204;
            # }
        }
    }
}